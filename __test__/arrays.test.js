"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
require("../src/arrays");
(0, globals_1.describe)("Arrays Extensions test cases", () => {
    (0, globals_1.it)("should return true when given an empty array", () => {
        (0, globals_1.expect)([].isEmpty()).toBe(true);
    });
    (0, globals_1.it)("should return false when given a non-empty array", () => {
        const arr = [1, 2, 3];
        (0, globals_1.expect)(arr.isEmpty()).toBe(false);
    });
    (0, globals_1.it)("should return true when given an array containing only null values", () => {
        const arr = [null, null, null];
        (0, globals_1.expect)(arr.isEmpty()).toBe(false);
    });
    (0, globals_1.it)("should return false when given an array containing special characters", () => {
        const arr = [1, 2, 3, null];
        (0, globals_1.expect)(arr.isEmpty()).toBe(false);
    });
    // Tests that the function returns true when called on an array with one element
    (0, globals_1.it)("should return true when called on an array with one element", () => {
        const arr = [1];
        (0, globals_1.expect)(arr.isNotEmpty()).toBe(true);
    });
    // Tests that the function returns true for an empty array
    (0, globals_1.it)("should return true when array is empty", () => {
        const arr = [];
        (0, globals_1.expect)(arr.isEmptyOrNull()).toBe(true);
    });
    // Generated by CodiumAI
    (0, globals_1.describe)("groupBy", () => {
        // Tests that groupBy function returns an object with keys grouped by the given key
        (0, globals_1.it)("should return an object with keys grouped by the given key when the array is not empty", () => {
            const arr = [
                { id: 1, name: "John" },
                { id: 2, name: "Jane" },
                { id: 3, name: "John" },
                { id: 4, name: "Jane" },
            ];
            const result = arr.groupBy("name");
            (0, globals_1.expect)(result).toEqual({
                John: [
                    { id: 1, name: "John" },
                    { id: 3, name: "John" },
                ],
                Jane: [
                    { id: 2, name: "Jane" },
                    { id: 4, name: "Jane" },
                ],
            });
        });
        // Tests that groupBy function returns an empty object when the array is empty
        (0, globals_1.it)("should return an empty object when the array is empty", () => {
            const arr = [];
            const result = arr.groupBy("name");
            (0, globals_1.expect)(result).toEqual({});
        });
    });
    // Tests that the function returns an empty array when given an empty array.
    (0, globals_1.it)("should return an empty array when given an empty array", () => {
        const arr = [];
        const result = arr.removeDuplicates();
        (0, globals_1.expect)(result).toEqual([]);
    });
    // Tests that an array with unique objects returns the same array
    (0, globals_1.it)("should return the same array when the input array has unique objects", () => {
        const input = [
            { id: 1, name: "John" },
            { id: 2, name: "Jane" },
            { id: 3, name: "Bob" },
        ];
        const expected = [
            { id: 1, name: "John" },
            { id: 2, name: "Jane" },
            { id: 3, name: "Bob" },
        ];
        const result = input.removeDuplicates();
        (0, globals_1.expect)(result).toEqual(expected);
    });
    // Tests that an array with one object returns the same array
    (0, globals_1.it)("should return the same array when the input array has one object", () => {
        const input = [{ id: 1, name: "John" }];
        const expected = [{ id: 1, name: "John" }];
        const result = input.removeDuplicates();
        (0, globals_1.expect)(result).toEqual(expected);
    });
    // Tests that an empty array returns an empty array
    (0, globals_1.it)("should return an empty array when the input array is empty", () => {
        const input = [];
        const expected = [];
        const result = input.removeDuplicates();
        (0, globals_1.expect)(result).toEqual(expected);
    });
    // Tests that an array with multiple objects with the same id and name returns an array with unique objects
    (0, globals_1.it)("should return an array with unique objects when the input array has multiple objects with the same id and name", () => {
        const input = [
            { id: 1, name: "John" },
            { id: 2, name: "Jane" },
            { id: 1, name: "John" },
            { id: 3, name: "Bob" },
            { id: 2, name: "Jane" },
        ];
        const expected = [
            { id: 1, name: "John" },
            { id: 2, name: "Jane" },
            { id: 3, name: "Bob" },
        ];
        const result = input.removeDuplicates();
        (0, globals_1.expect)(result).toEqual(expected);
    });
    // Tests that sortBy sorts an array of objects by a given key in ascending order
    (0, globals_1.it)("should sort an array of objects in ascending order when given a key", () => {
        const arr = [
            { name: "John", age: 25 },
            { name: "Alice", age: 30 },
            { name: "Bob", age: 20 },
        ];
        const sortedArr = arr.sortBy("name");
        (0, globals_1.expect)(sortedArr).toEqual([
            { name: "Alice", age: 30 },
            { name: "Bob", age: 20 },
            { name: "John", age: 25 },
        ]);
    });
    // Tests that sortBy sorts an array of objects by a given key in descending order
    (0, globals_1.it)("should sort an array of objects in descending order when given a key", () => {
        const arr = [
            { name: "John", age: 25 },
            { name: "Alice", age: 30 },
            { name: "Bob", age: 20 },
        ];
        const sortedArr = arr.sortBy("name").reverse();
        (0, globals_1.expect)(sortedArr).toEqual([
            { name: "John", age: 25 },
            { name: "Bob", age: 20 },
            { name: "Alice", age: 30 },
        ]);
    });
    // Tests that firstOrDefault method
    (0, globals_1.it)("should return the first element of the array when the array is not empty", () => {
        const arr = [1, 2, 3];
        const result = arr.firstOrDefault();
        (0, globals_1.expect)(result).toEqual(1);
    });
    // Tests that firstOrDefault method returns null when the array is empty
    (0, globals_1.it)("should return null when the array is empty", () => {
        const arr = [];
        const result = arr.firstOrDefault();
        (0, globals_1.expect)(result).toEqual(null);
    });
    // Tests that firstOrDefault method returns the default value when the array is empty
    (0, globals_1.it)("should return the default value when the array is empty", () => {
        const arr = [];
        const result = arr.firstOrElse(1);
        (0, globals_1.expect)(result).toEqual(1);
    });
    // Tests that lastOrDefault method
    (0, globals_1.it)("should return the last element of the array when the array is not empty", () => {
        const arr = [1, 2, 3];
        const result = arr.lastOrDefault();
        (0, globals_1.expect)(result).toEqual(3);
    });
    // Tests that lastOrDefault method returns null when the array is empty
    (0, globals_1.it)("should return null when the array is empty", () => {
        const arr = [];
        const result = arr.lastOrDefault();
        (0, globals_1.expect)(result).toEqual(null);
    });
    // Tests that lastOrDefault method returns the default value when the array is empty
    (0, globals_1.it)("should return the default value when the array is empty", () => {
        const arr = [];
        const result = arr.lastOrDefault();
        (0, globals_1.expect)(result).toEqual(null);
    });
    // Tests that firstOrElse method returns the default value when the array is empty
    (0, globals_1.it)("should return the default value when the array is empty", () => {
        const arr = [];
        const result = arr.firstOrElse(1);
        (0, globals_1.expect)(result).toEqual(1);
    });
    // Tests that firstOrElse method returns the first element of the array when the array is not empty
    (0, globals_1.it)("should return the first element of the array when the array is not empty", () => {
        const arr = [1, 2, 3];
        const result = arr.firstOrElse(() => 5);
        (0, globals_1.expect)(result).toEqual(1);
    });
    // test skip function
    (0, globals_1.it)("should return an array with the first element removed", () => {
        const arr = [5, 6, 6];
        const result = arr.skip(1);
        (0, globals_1.expect)(result).toEqual([6, 6]);
    });
    // test take function
    (0, globals_1.it)("should return an array with the first element removed", () => {
        const arr = [5, 6, 6];
        const result = arr.take(1);
        (0, globals_1.expect)(result).toEqual([5]);
    });
});
